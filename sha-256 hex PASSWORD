USING LIBRARY 
import rsa

def generateHash(password):
    binPassword = password.encode('utf-8')
    hex_password = rsa.compute_hash(binPassword, 'SHA-1')
    return hex_password.hex()

password = input("Enter a Password :")
hash = generateHash(password)
print(f"Hash Code : {hash}")
print(f"Length of Hash : {len(hash)}")


USING WITHOUT LIBRARY 

def rotate_right(value, bits):
    return ((value >> bits) | (value << (32 - bits))) & 0xFFFFFFFF

def sha256(message):
    K = [
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
        0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74,
        0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f,
        0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354,
        0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
        0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3,
        0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa,
        0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ]
    H = [
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    ]
    
    binary_message = ''.join(f'{ord(char):08b}' for char in message)
    original_length = len(binary_message)
    binary_message += '1'
    
    while (len(binary_message) + 64) % 512 != 0:
        binary_message += '0'
    
    binary_message += f'{original_length:064b}'
    
    for i in range(0, len(binary_message), 512):
        chunk = binary_message[i:i + 512]
        words = [int(chunk[j:j + 32], 2) for j in range(0, 512, 32)]
        
        for j in range(16, 64):
            s0 = rotate_right(words[j - 15], 7) ^ rotate_right(words[j - 15], 18) ^ (words[j - 15] >> 3)
            s1 = rotate_right(words[j - 2], 17) ^ rotate_right(words[j - 2], 19) ^ (words[j - 2] >> 10)
            words.append((words[j - 16] + s0 + words[j - 7] + s1) & 0xFFFFFFFF)
        
        a, b, c, d, e, f, g, h = H
        
        for j in range(64):
            S1 = rotate_right(e, 6) ^ rotate_right(e, 11) ^ rotate_right(e, 25)
            ch = (e & f) ^ ((~e) & g)
            temp1 = (h + S1 + ch + K[j] + words[j]) & 0xFFFFFFFF
            S0 = rotate_right(a, 2) ^ rotate_right(a, 13) ^ rotate_right(a, 22)
            maj = (a & b) ^ (a & c) ^ (b & c)
            temp2 = (S0 + maj) & 0xFFFFFFFF
            h = g
            g = f
            f = e
            e = (d + temp1) & 0xFFFFFFFF
            d = c
            c = b
            b = a
            a = (temp1 + temp2) & 0xFFFFFFFF
        
        H = [
            (H[0] + a) & 0xFFFFFFFF, (H[1] + b) & 0xFFFFFFFF, (H[2] + c) & 0xFFFFFFFF,
            (H[3] + d) & 0xFFFFFFFF, (H[4] + e) & 0xFFFFFFFF, (H[5] + f) & 0xFFFFFFFF,
            (H[6] + g) & 0xFFFFFFFF, (H[7] + h) & 0xFFFFFFFF
        ]
    
    return ''.join(f'{value:08x}' for value in H)

password = input("Enter a password: ")
hashed_password = sha256(password)
print(f"SHA-256 Hash: {hashed_password}")
